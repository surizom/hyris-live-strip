{"version":3,"sources":["components/Strip.tsx","components/StripContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["messages","AnimatedStrip","styled","div","props","width","keyframes","duration","Strip","useState","setWidth","animationInfo","ref","useRef","useEffect","current","scrollWidth","console","log","map","message","className","toUpperCase","src","process","alt","StripContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAIMA,EAAW,CACf,+BACA,6BACA,+CACA,kCAmBIC,EAAgBC,IAAOC,IAAV,sSAQJ,SAACC,GAAD,OAtBCC,EAsBqCD,EAAMC,MAtBzBC,YAAlB,IAAD,uGAKKD,EAAQ,MALb,IAACA,KAuBV,SAACD,GAAD,OAA+BA,EAAMG,YAgD5BC,EAvCD,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACXJ,EADW,KACJK,EADI,KAEZC,EAAgB,CACpBN,QACAE,UAAWF,EAAQ,MAtCT,IAyCNO,EAAMC,iBAAO,MAcnB,OAZAC,qBAAU,WAAO,IACPC,EAAYH,EAAZG,QAEO,MAAXA,GAEFL,EAASK,EAAQC,eAElB,CAACJ,IAGJK,QAAQC,IAAIP,GAGV,cAACV,EAAD,CAAeI,MAAOM,EAAcN,MAAOE,SAAUI,EAAcJ,SAAUK,IAAKA,EAAlF,SACGZ,EAASmB,KAAI,SAACC,GAAD,OACZ,sBAAKC,UAAU,UAAf,UACE,mBAAGA,UAAU,cAAb,SAA4BD,EAAQE,gBACpC,mBAAGD,UAAU,cAAb,SACE,qBACEA,UAAU,kBACVE,IAAG,UAAKC,oBAAL,gBACHC,IAAI,mBANoBL,SC3DvBM,G,MANQ,kBACrB,qBAAKL,UAAU,YAAf,SACE,cAAC,EAAD,QCMWM,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCOSO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e664e48.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport \"./Strip.css\";\n\nconst messages = [\n  \"Envoyez vos msg au 102910921\",\n  \"Lorem ipsum dolor sit amet\",\n  \"deserunt mollit anim id est laborzaddazdzaum\",\n  \"Envoyez vos msg au 10291011921\",\n];\n\nconst SPEED = 80;\n\nconst rotate = (width: number) => keyframes`\n  from {\n    margin-left: 1800px;\n  }\n  to {\n    margin-left: -${width + 1800}px;\n  }\n`;\n\ninterface AnimatedStripProps {\n  width: number;\n  duration: number;\n}\n\nconst AnimatedStrip = styled.div`\n  flex-grow: 1;\n  white-space: nowrap;\n  overflow: scroll;\n  scrollbar-width: none;\n  scroll-behavior: smooth;\n  margin-left: 1800px;\n\n  animation: ${(props: AnimatedStripProps) => rotate(props.width)} linear\n    ${(props: AnimatedStripProps) => props.duration}s;\n\n  display: flex;\n  flex-direction: row;\n\n  padding: 10px 5px;\n  font-size: 25px;\n`;\n\nconst Strip = () => {\n  const [width, setWidth] = useState(0);\n  const animationInfo = {\n    width,\n    duration: (width + 3600) / SPEED,\n  };\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const { current } = ref;\n\n    if (current != null) {\n      // @ts-ignore\n      setWidth(current.scrollWidth);\n    }\n  }, [ref]);\n\n  // eslint-disable-next-line\n  console.log(animationInfo);\n\n  return (\n    <AnimatedStrip width={animationInfo.width} duration={animationInfo.duration} ref={ref}>\n      {messages.map((message) => (\n        <div className=\"message\" key={message}>\n          <p className=\"sub-message\">{message.toUpperCase()}</p>\n          <p className=\"sub-message\">\n            <img\n              className=\"sub-message-img\"\n              src={`${process.env.PUBLIC_URL}/favicon.png`}\n              alt=\"logo hyris\"\n            />\n          </p>\n        </div>\n      ))}\n    </AnimatedStrip>\n  );\n};\n\nexport default Strip;\n","import React from \"react\";\nimport Strip from \"./Strip\";\nimport \"./StripContainer.css\";\n\nconst StripContainer = () => (\n  <div className=\"container\">\n    <Strip />\n  </div>\n);\n\nexport default StripContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport StripContainer from \"./components/StripContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StripContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}